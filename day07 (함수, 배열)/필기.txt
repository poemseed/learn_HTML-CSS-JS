1. 함수
 1-1. 함수 사용
	- 함수의 사용은 함수의 정의와 함수의 호출로 나뉜다.

 1-2. 함수의 정의

	function 함수이름(){
		.. 실행할 구문 ..
	}

 1-3. 함수의 호출
	- 함수를 호출하기 위해서는 함수이름(); 형태를 사용한다.

 1-4. 파라미터(parameters)
	- 함수의 정의
		
		function 함수이름(파라미터){
			.. 실행할 구문 ..
		}

	- 함수의 호출

		함수이름(파라미터);

 1-5. 다중 파라미터
	- 함수정의

		function 함수이름( 파라미터1, 파라미터2, ... 파라미터n ){

		}

	- 함수호출

		함수이름( 파라미터1, 파라미터2, ... 파라미터n );

 1-6. return형 함수
	- 자신이 호출된 위치로 되돌려 주기 위해서 "return"이라는 키워드를 작성한다.
	- 함수 생성
		
		function f(x){
			return x + 1;
		}

	- 함수 호출

		let y = f(4);	-> y = 5;

 1-7. 함수의 실행 중단
	- 자바스크립트 함수는 처리도중 return문을 만나게 되면 그 즉시 실행을 중단한다.
	- 리턴값이 없이 처리를 중단하고자 하는 경우네는 return 키워드만 사용한다.
	- 값이 없는 리턴 결과를 변수에 대입한 경우, 정의되지 않는 값인 "unddfined"가 대입된다.

 1-8. 화살표 함수
	- arrow function
	
2. 배열
	- 프로그램에서 이야기하는 변수를 그룹으로 묶은 형태의 한 종류로서, 사물함 같은 형태를 갖고 있다.
	- javascript에서는 데이터형의 선언을 별도로 하지 않기 때문에 데이터형에 대한 제약은 없다. 
	(단, 배열 안에는 한 종류의 값들만 저장하는 것이 바람직하다.)

 2-1. 배열 만드는 방법
	- let myarray = new Array( 값, 값2, ... , 값n );
	- let myarray = [ 값, 값2, ... , 값n ];

 2-2. 인덱스 번호를 갖는 데이터 저장소
	- 생성된 배열은 사물함과 같이 각각의 칸에 값들이 저장되고 각각의 칸은 0부터 일련번호가 지정된다. (일련번호 = 배열의 인덱스)

 2-3. 배열 데이터의 접근
	- 생성된 배열의 값에는 "배열이름[일련번호]" 형식으로 접근할 수 있다.
	- let lang = myarray[0];
	- myarray[2] = "html";

 2-4. 2차 배열
	- 2차 배열 생성 방법
	
		let myarray = new Array(
			new Array( 값1, 값2, ... , 값n ),
			new Array( 값1, 값2, ... , 값n )
		);

		let myarray = [
			[ 값1, 값2, ... , 값n ],
			[ 값1, 값2, ... , 값n ]
		];

 2-5. 2차 배열 사용
	- 생성된 배열의 값에는 "배열이름[행][열]"형식으로 접근할 수 있다. 행, 열의 인덱스값은 "0"부터 시작된다.
	- 값 읽기

		let lang = myarray[0][0];

	- 값 대입

		myarray[1][2] = "통신";

	- 크기조회

		* 행의 크기
		-> 배열객체이름.length;

		* n번째 행에 대한 "열"의 크기를 조회
		-> 배열객체이름[n].length;

3. 주요 내장 함수
	- alert(문자열)
	: 주어진 문자열을 확인 대화창으로 화면에 표시
	-  confirm(문자열)
	: 주어진 문자열이 표시되는 확인/취소 대화창을 화면에 표시
	- prompt(문자열)
	: 주어진 문자열이 제목으로 표시되는 값을 입력받기 위한 대화창
	- eval(문자열)
	: 주어진 문자열을 수식으로 변환하여 리턴
	- Number(문자열)
	: 주어진 문자열의 변수가 숫자모양일 경우 실제 숫자형으로 변화하여 리턴
	- parseInt(문자열)
	: 주어진 문자열의 변수가 숫자모양일 경우 실제 숫자형으로 변화하여 리턴
	- isNaN(문자열)
	: 주어진 문자열이 숫자형식이 아니면 true, 숫자형식이면 false를 리턴한다.

 3-1. Number 함수와 parseInt 함수의 차이
	- 전달되는 파라미터가 정수형태의 문자열일 경우 두 함수는 동일한 결과를 리턴하지만, 실수 형태를 갖는 문자열을 전달할 경우 두 함수는 서로 다
	른 결과를 리턴한다.
	- Number	: 주어진 문자열이 "100.1"일 경우 100.1이라는 실수 형태로 변환
	- parseInt	: 주어진 문자열이 "100.1"일 경우 소수점 자리를 내림하고 정수 형태인 100만 리턴

 3-2. 변수의 NaN여부를 검사하는 함수
	- isNaN 함수는 파라미터로 전달되는 변수의 NaN 여부를 boolean 형태로 리턴
	- 파라미터가 숫자로 변환할 수 없는 문자열일 경우에는 NaN형태이므로 true를 리턴
	- 파라미터가 숫자 모양을 한 문자열이거나 실제 숫자형 변수일 경우에는 NaN이 아니므로 false를 리턴한다.
	- parseInt 함수나 Number 함수의 정상동작을 보장하기 위해서는 파라미터를 전달하기 전에 해당 값이 NaN이 아니라는 것을 검사해야한다.
	- isNaN 함수의 결과를 부정하면, 그 값은 숫자값이거나 숫자형으로 변환 가능한 문자열이라는 의미가 된다.


	


